gitcreds::gitcreds_set()
# make a clean slate
rm(list = ls())
# load needed packages
library(tidyverse)
library(vdemdata)
# Create a data frame of the "full + others" data set
v13 <- vdem
# Filter to just Colombia since 1899:
v13_col <- filter(v13, country_name=="Colombia" & year > 1899)
# Select just the ID and subnational variables
# (Note: v2elsnless and v2elsnmore are not in this df. We will make sure to
# include them in our request to the data manager.)
v13_col_sn <- v13_col %>%
select(country_id, country_name, country_text_id, historical_date, year,
v2elsnlfc_0:v2elsnlfc_21, v2elsnmrfc_0:v2elsnmrfc_21,
v2clrgstch_0:v2clrgstch_21, v2clrgwkch_0:v2clrgwkch_21)
# Listing the variable names to check our work:
names(v13_col_sn)
# Export the result to a CSV file:
write.csv(v13_col_sn, file = "v13_col_sn.csv")
# Make a scatterplot to check the relationship between rural (0) and urban (1)
# (by default, for all years)
ggplot(v13_col_sn, aes(x =  v2elsnlfc_0, y =  v2elsnlfc_1)) +
geom_point()
# Make a scatterplot to check the relationship between rural (0) and urban (1)
# (by default, for all years)
ggplot(v13_col_sn, aes(x =  v2elsnlfc_0, y =  v2elsnlfc_1)) +
geom_point() +
geom_text(aes(label = year), vjust = 1.5, hjust = 0.5) +
labs(title = "Scatterplot of less free and fair subnational elections: rural vs urban",
x = "Rural (proportion)",
y = "Urban (proportion)")
# Correlate variables that we hope are opposite poles
rich_poor <- select(v13_col_sn, c(v2elsnlfc_2, v2elsnlfc_3))
cor(rich_poor, use = "pairwise")
# Correlate all variables (except *_16 and beyond, which are all NA)
allvars <- select(v13_col_sn, v2elsnlfc_0:v2elsnlfc_15)
cor(allvars, use = "pairwise")
# Scatterplot matrix, which gives both a scatterplot and correlations.
# I've inserted labels to make it easier to read.
install.packages("GGally")
library(GGally)
ggpairs(allvars, columns = c("v2elsnlfc_0", "v2elsnlfc_1", "v2elsnlfc_2",
"v2elsnlfc_3", 'v2elsnlfc_4', "v2elsnlfc_5",
"v2elsnlfc_6", 'v2elsnlfc_7', 'v2elsnlfc_8',
"v2elsnlfc_9", "v2elsnlfc_10", "v2elsnlfc_11",
"v2elsnlfc_12", "v2elsnlfc_13", "v2elsnlfc_14",
"v2elsnlfc_15"),
columnLabels = c("rural", "urban", "poor", "rich", 'capital',
"not_cap", "N", 'S', 'E', "W", "unrest", "illicit",
"sparse", "remote", "indig", "par_strong"),
switch = "both",
mapping = ggplot2::aes(alpha = .2), theme(text = element_text(size = 1)),
title="subnational variables")
library(sf)
install.packages("terra")
install.packages("spData")
install.packages("spDataLarge", repos = "https://nowosad.r-universe.dev")
library(sf)
library(terra)
library(spData)
library(spDataLarge)
class(world)
names(world)
plot(world)
plot(world$geom)
world_mini = world[1:2, 1:3]
world_mini
library(sf)
library(terra)
library(spData)
library(spDataLarge)
names(world)
plot(world["gdpPercap"])
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia)
plot(world["pop"], reset = FALSE)
plot(asia, add = TRUE, col = "red")
plot(world["pop"], reset = FALSE)
plot(world)
names(world$subregion)
list(world$subregion)
world_sa = world[world$subregion == "South America"]
world_sa = world[world$subregion == "South America", ]
sa = st_union(world_sa)
plot(world["gdpPercap"], reset = FALSE)
plot(sa, add = TRUE, col = "red")
plot(world["gdpPercap"], reset = FALSE)
#
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
world_cents = st_centroid(world, of_largest = TRUE)
plot(st_geometry(world_cents), add = TRUE, cex = cex)
#
col = world[world$name_long == "Colombia", ]
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(st_geometry(col), add = TRUE)
plot(st_geometry(col), expandBB = c(1, 0.2, 0.1, 1), col = "gray", lwd = 3)
#
col = world[world$name_long == "Colombia", ]
#
plot(world["continent"], reset = FALSE)
#
col = world[world$name_long == "Colombia", ]
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(st_geometry(world_sa), add = TRUE)
plot(st_geometry(col), expandBB = c(0.5, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(st_geometry(world_sa), add = TRUE)
#
plot(world["continent"], reset = FALSE)
#
col = world[world$name_long == "Colombia", ]
plot(st_geometry(col), expandBB = c(0.5, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(st_geometry(world_sa), add = TRUE)
#
col = world[world$name_long == "Colombia", ]
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
#
plot(world["continent"], reset = FALSE)
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
#
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
world_cents = st_centroid(world, of_largest = TRUE)
plot(st_geometry(world_cents), add = TRUE, cex = cex)
#
col = world[world$name_long == "Colombia", ]
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(st_geometry(world_cents), add = TRUE, cex = cex)
#
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
world_cents = st_centroid(world, of_largest = TRUE)
plot(st_geometry(world_cents), add = TRUE, cex = cex)
#
col = world[world$name_long == "Colombia", ]
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1.5), col = "gray", lwd = 3)
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1.5), col = "gray", lwd = 3)
plot(st_geometry(world_sa), add = TRUE)
# sf object
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = "EPSG:4326")    # sfc object
lnd_attrib = data.frame(                           # data.frame object
name = "London",
temperature = 25,
date = as.Date("2023-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
lnd_sf
class(lnd_sf)
View(lnd_sf)
st_point(c(5, 2))
## Raster data
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
## Raster data
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
my_rast = rast(raster_filepath)
class(my_rast)
my_rast
# Load necessary packages
library(sf)
library(terra)
library(spData)
library(spDataLarge)
list(world$subregion)
world_sa = world[world$subregion == "South America", ]
sa = st_union(world_sa)
plot(world["gdpPercap"], reset = FALSE)
plot(sa, add = TRUE, col = "red")
# population circles
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
world_cents = st_centroid(world, of_largest = TRUE)
plot(st_geometry(world_cents), add = TRUE, cex = cex)
#
col = world[world$name_long == "Colombia", ]
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1.5), col = "gray", lwd = 3)
plot(st_geometry(world_sa), add = TRUE)
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1.5), col = "gray", lwd = 3)
plot(st_geometry(world_sa), add = TRUE)
# geometries and attributes: create a sf object
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = "EPSG:4326")    # sfc object
lnd_attrib = data.frame(                           # data.frame object
name = "London",
temperature = 25,
date = as.Date("2023-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
raster_filepath = system.file("raster/srtm.tif", package = "spDataLarge")
my_rast = rast(raster_filepath)
class(my_rast)
my_rast
plot(my_rast)
plot(my_rast)
plot(my_rast)
plot(my_rast)
new_raster = rast(nrows = 6, ncols = 6,
xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5,
vals = 1:36)
multi_raster_file = system.file("raster/landsat.tif", package = "spDataLarge")
multi_rast = rast(multi_raster_file)
multi_rast
nlyr(multi_rast)
# units
st_area(Colombia) # requires the s2 package in recent versions of sf
# units
st_area(col) # requires the s2 package in recent versions of sf
units::set_units(st_area(col), km^2)
#2.6 Exercises
#E1
summary(world$geom)
text(st_geometry(world_sa))
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1.5), col = "gray", lwd = 3)
plot(st_geometry(col), expandBB = c(0, 0.2, 0.1, 1.5), col = "gray", lwd = 3)
plot(st_geometry(world_sa), add = TRUE)
text(st_geometry(world_sa))
library(terra)
library(dplyr)
library(spData)
options(stringsAsFactors = FALSE)
library(tidyverse)
library(sf)
library(inborutils)
install.packages("inborutils")
library(inborutils)
setwd("C:/Users/patri/Downloads")
gadm41_COL <- st_read("gadm41_COL.gpkg")
library(here)
install.packages("here")
install.packages("mapview")
mapviewOptions(fgb = FALSE)
library(mapview)
mapviewOptions(fgb = FALSE)
st_layers(gadm41_COL)
install.packages("rgdal")
ogrListLayers(gadm41_COL)
st_layers(gadm41_COL)
mapview(gadm41_COL)
library(colmaps)
head(municipios@data)
#
library(ggplot2)
colmap(municipios) +
ggtitle("Municipios en Colombia")
colmap(municipios) +
ggtitle("Municipios en Colombia")
# loading shapefiles...
library(sf)
setwd("C:/Users/patri/Downloads")
setwd("G:/My Drive/Academia/PhD/Coursework/Y2/FA23/POLS60885_CausalInference/Paper")
library(readr)
CMPD <- read_csv("CMPD.csv")
View(CMPD)
# error message about deprecated feature, says "Please migrate to sf"
# with these package, we can merge Colombian panel data...
library(readr)
head(CMPD)
colmap(municipios, subset(CMPD, aÃ±o == 2020), var = "Mortalidad")
colmap(municipios, subset(CMPD, Year == 2020), var = "Mortalidad")
head(municipios)
head(municipios@data)
head(CMPD)
CMPD <- CMPD %>%
rename(id = CODIGODANE)
library(dplyr)
CMPD <- CMPD %>%
rename(id = CODIGODANE)
colmap(municipios, subset(CMPD, Year == 2020), var = "Mortalidad")
colmap(municipios, subset(CMPD, Year == 2020), var = "Mortalidad")
colmap(municipios, subset(CMPD, Year == 2020), var = "Mortalidad")
head(municipios@data)
view(municipios@data)
CMPD$id <- sub("^50", "050", CMPD$id)
colmap(municipios, subset(CMPD, Year == 2020), var = "Mortalidad")
CMPD$id <- sprintf("%05d",, CMPD$id)
CMPD$id <- sprintf("%05d", CMPD$id)
CMPD$id <- ifelse(nchar(CMPD$id) == 4, paste0("0", CMPD$id), CMPD$id)
CMPD <- read_csv("CMPD.csv")
CMPD <- CMPD %>%
rename(id = CODIGODANE)
CMPD$id <- ifelse(nchar(CMPD$id) == 4, paste0("0", CMPD$id), CMPD$id)
colmap(municipios, subset(CMPD, Year == 2020), var = "Mortalidad")
colmap(municipios, subset(CMPD, var = "PDET")
colmap(municipios, subset(CMPD, var = "PDET"))
colmap(municipios, subset(CMPD, Year == 2020), var = "PDET")
colmap(municipios, subset(CMPD, Year == 2020), var = "altura")
colmap(municipios, subset(CMPD, Year == 2020), var = "discapital")
CMPD <- CMPD %>%
rename(id_depto = DeptCode)
# and by departamento...
CMPD %>%
filter(Year == 2000) %>%
group_by(id_depto) %>%
summarise(HomicideRate) %>%
colmap(departamentos, data = ., data_id = "id_depto")
# and by departamento...
CMPD %>%
filter(Year == 2000) %>%
group_by(id_depto) %>%
summarise(tasa = 10^5 * sum(homicidios, na.rm = TRUE) /
sum(pobl_tot, na.rm = TRUE)) %>%
colmap(departamentos, data = ., data_id = "id_depto")
# and by departamento...
CMPD %>%
filter(Year == 2020) %>%
group_by(id_depto) %>%
summarise(tasa = 10^5 * sum(homicidios, na.rm = TRUE) /
sum(pobl_tot, na.rm = TRUE)) %>%
colmap(departamentos, data = ., data_id = "id_depto")
CMPD$id_depto <- ifelse(nchar(CMPD$id_depto) == 1, paste0("0", CMPD$id_depto), CMPD$id_depto)
# and by departamento...
CMPD %>%
filter(Year == 2020) %>%
group_by(id_depto) %>%
summarise(tasa = 10^5 * sum(homicidios, na.rm = TRUE) /
sum(pobl_tot, na.rm = TRUE)) %>%
colmap(departamentos, data = ., data_id = "id_depto")
# and by departamento...
CMPD %>%
filter(Year == 2020) %>%
group_by(id_depto) %>%
summarise(tasa_homicidio = 10^5 * sum(homicidios, na.rm = TRUE) /
sum(pobl_tot, na.rm = TRUE)) %>%
colmap(departamentos, data = ., data_id = "id_depto")
setwd("G:/My Drive/git/snvdem24")
library(colmaps)
head(municipios@data)
#
library(ggplot2)
colmap(municipios) +
ggtitle("Municipios en Colombia")
head(municipios)#@data)
head(municipios@data)
# error message about deprecated feature, says "Please migrate to sf"
# with these package, we can merge Colombian panel data...
library(readr)
CMPD <- read_csv("CMPD.csv")
library(readr)
CMPD <- read_csv("data/panel/CMPD.csv")
View(CMPD)
library(dplyr)
CMPD <- CMPD %>%
rename(id = CODIGODANE)
CMPD <- CMPD %>%
rename(id_depto = DeptCode)
CMPD$id <- ifelse(nchar(CMPD$id) == 4, paste0("0", CMPD$id), CMPD$id)
CMPD$id_depto <- ifelse(nchar(CMPD$id_depto) == 1, paste0("0", CMPD$id_depto), CMPD$id_depto)
colmap(municipios, subset(CMPD, Year == 2020), var = "Mortalidad")
colmap(municipios, subset(CMPD, Year == 2020), var = "discapital")
View(CMPD)
library(colmaps)
# this data can be mapped using ggplot2
library(ggplot2)
