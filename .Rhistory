knitr::opts_chunk$set(echo = TRUE)
setwd("G:/My Drive/git/snvdem24")
# make a clean slate
rm(list = ls())
# load needed packages
library(tidyverse)
library(vdemdata)
# Create a data frame of version 13 dataset:
v13 <- vdem
# this df appears to be the same as MC's "full + others" data set: read_dta("C:/Users/mcoppedg/Dropbox/MC/VDemFiles/Archive/V13/V-Dem-CY-Full+Others/V-Dem-CY-Full+Others-v13.dta")
# Filter to just Colombia since 1899:
v13_col <- filter(v13, country_name=="Colombia" & year > 1899)
# Select just the ID and subnational variables
# (Note: v2elsnless and v2elsnmore are not in this df. We will make sure to
# include them in our request to the data manager.)
v13_col_sn <- v13_col %>%
select(country_id, country_name, country_text_id, historical_date, year,
v2elsnlfc_0:v2elsnlfc_21, v2elsnmrfc_0:v2elsnmrfc_21,
v2clrgstch_0:v2clrgstch_21, v2clrgwkch_0:v2clrgwkch_21)
# Listing the variable names to check our work:
#names(v13_col_sn)
# Export the result to a CSV file:
#write.csv(v13_col_sn, file = "v13_col_sn.csv")
# create subset of V-Dem data for 2018
v13_col_sn_2018 <- subset(v13_col_sn, year == 2018)
v13_col_sn_2018 <- v13_col_sn_2018 %>%
select(-matches("_17$|_18$|_19$|_20$|_21$")) # remove responses not relevant for Colombia
df2rm = c("v13", "v13_col", "v13_col_sn", "df2rm")
rm(list = df2rm)
col2 <- st_read("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/BaseLayer/MGN_ANM_MPIOS.shp")
library(sf)
col <- st_read("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/sf/shp/Merge18_col.shp")
# Import the shapefile
col2 <- st_read("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/sf/shp/Merge18_col.shp")
# Identify variables that start with "STP"
STP_vars <- grep("^STP", names(col2), value = TRUE)
# Remove those variables from the dataframe
col2 <- col2[, !names(col2) %in% STP_vars]
knitr::opts_chunk$set(echo = TRUE)
setwd("G:/My Drive/git/snvdem24")
# make a clean slate
rm(list = ls())
# load needed packages
library(tidyverse)
library(vdemdata)
# Create a data frame of version 13 dataset:
v13 <- vdem
# this df appears to be the same as MC's "full + others" data set: read_dta("C:/Users/mcoppedg/Dropbox/MC/VDemFiles/Archive/V13/V-Dem-CY-Full+Others/V-Dem-CY-Full+Others-v13.dta")
# Filter to just Colombia since 1899:
v13_col <- filter(v13, country_name=="Colombia" & year > 1899)
# Select just the ID and subnational variables
# (Note: v2elsnless and v2elsnmore are not in this df. We will make sure to
# include them in our request to the data manager.)
v13_col_sn <- v13_col %>%
select(country_id, country_name, country_text_id, historical_date, year,
v2elsnlfc_0:v2elsnlfc_21, v2elsnmrfc_0:v2elsnmrfc_21,
v2clrgstch_0:v2clrgstch_21, v2clrgwkch_0:v2clrgwkch_21)
# Listing the variable names to check our work:
#names(v13_col_sn)
# Export the result to a CSV file:
#write.csv(v13_col_sn, file = "v13_col_sn.csv")
# create subset of V-Dem data for 2018
v13_col_sn_2018 <- subset(v13_col_sn, year == 2018)
v13_col_sn_2018 <- v13_col_sn_2018 %>%
select(-matches("_17$|_18$|_19$|_20$|_21$")) # remove responses not relevant for Colombia
df2rm = c("v13", "v13_col", "v13_col_sn", "df2rm")
rm(list = df2rm)
library(sf)
col <- st_read("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/BaseLayer/MGN_ANM_MPIOS.shp")
col <- col %>%
select(1:8)
# municipal-level data for distance to capital city
CEDE18 <- read_excel("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/4-5_DisCapital/PANEL_CARACTERISTICAS_GENERALES(2021).xlsx")
knitr::opts_chunk$set(echo = TRUE)
setwd("G:/My Drive/git/snvdem24")
# make a clean slate
rm(list = ls())
# load needed packages
library(tidyverse)
library(vdemdata)
# Create a data frame of version 13 dataset:
v13 <- vdem
# this df appears to be the same as MC's "full + others" data set: read_dta("C:/Users/mcoppedg/Dropbox/MC/VDemFiles/Archive/V13/V-Dem-CY-Full+Others/V-Dem-CY-Full+Others-v13.dta")
# Filter to just Colombia since 1899:
v13_col <- filter(v13, country_name=="Colombia" & year > 1899)
# Select just the ID and subnational variables
# (Note: v2elsnless and v2elsnmore are not in this df. We will make sure to
# include them in our request to the data manager.)
v13_col_sn <- v13_col %>%
select(country_id, country_name, country_text_id, historical_date, year,
v2elsnlfc_0:v2elsnlfc_21, v2elsnmrfc_0:v2elsnmrfc_21,
v2clrgstch_0:v2clrgstch_21, v2clrgwkch_0:v2clrgwkch_21)
# Listing the variable names to check our work:
#names(v13_col_sn)
# Export the result to a CSV file:
#write.csv(v13_col_sn, file = "v13_col_sn.csv")
# create subset of V-Dem data for 2018
v13_col_sn_2018 <- subset(v13_col_sn, year == 2018)
v13_col_sn_2018 <- v13_col_sn_2018 %>%
select(-matches("_17$|_18$|_19$|_20$|_21$")) # remove responses not relevant for Colombia
df2rm = c("v13", "v13_col", "v13_col_sn", "df2rm")
rm(list = df2rm)
library(sf)
col <- st_read("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/BaseLayer/MGN_ANM_MPIOS.shp")
col <- col %>%
select(1:8)
library(readxl)
MGN18 <- read_excel("G:/My Drive/git/snvdem24/data/geospatial/MGN_ANM_MPIOS/MGN18.xls")
# We select only relevant variables for merging purposes.
# colnames(MGN18)
MGN18 <- MGN18 %>%
select(1:7)
# we merge the FID variable to our main shapefile
col <- merge(col, MGN18[, c("MPIO_CDPMP", "FID")], by = "MPIO_CDPMP", all.x = TRUE)
# municipal-level data for distance to capital city
CEDE18 <- read_excel("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/4-5_DisCapital/PANEL_CARACTERISTICAS_GENERALES(2021).xlsx")
colnames(CEDE18)[3] = "MPIO_CDPMP"
colnames(CEDE18)[7] = "Year"
CEDE18 <- CEDE18 %>%
filter(Year == 2018)
# this data set also contains important descriptive information (department, province, rurality index) that we will hang onto
CEDE18 <- CEDE18[c("MPIO_CDPMP", "discapital", "disbogota")]
# Because the import creates a numeric field for DANE code, we must convert this numeric variable to character and then assure each observation has the corresponding 5 digits
CEDE18$MPIO_CDPMP <- as.character(CEDE18$MPIO_CDPMP)
# Add a 0 before values with 4 digits only
CEDE18$MPIO_CDPMP <- ifelse(nchar(CEDE18$MPIO_CDPMP) == 4, paste0("0", CEDE18$MPIO_CDPMP), CEDE18$MPIO_CDPMP)
# continuous scale
range(CEDE18$disbogota)
CEDE18$pct_4t5x <- CEDE18$disbogota / 1270.85
CEDE18 <- CEDE18 %>%
mutate(el_4t5x = ((1-pct_4t5x)*v13_col_sn_2018$v2elsnlfc_4)+(pct_4t5x*v13_col_sn_2018$v2elsnlfc_5))
View(CEDE18)
CEDE18 <- CEDE18 %>%
mutate(el_4t5x = ((1-pct_4t5x)*v13_col_sn_2018$v2elsnlfc_4)+(pct_4t5x*v13_col_sn_2018$v2elsnlfc_5)) %>%
mutate(em_4t5x = ((1-pct_4t5x)*v13_col_sn_2018$v2elsnmrfc_4)+(pct_4t5x*v13_col_sn_2018$v2elsnmrfc_5)) %>%
mutate(cs_4t5x = ((1-pct_4t5x)*v13_col_sn_2018$v2clrgstch_4)+(pct_4t5x*v13_col_sn_2018$v2clrgstch_5)) %>%
mutate(cw_4t5x = ((1-pct_4t5x)*v13_col_sn_2018$v2clrgwkch_4)+(pct_4t5x*v13_col_sn_2018$v2clrgwkch_5))
# Standardize the variables
sz <- function(x) {
return((x - mean(x)) / sd(x))
}
# Create new variables with standardized values
df_sz <- data.frame(el_4t5xs = sz(CEDE18$el_4t5x),
em_4t5xs = sz(CEDE18$em_4t5x),
cs_4t5xs = sz(CEDE18$cs_4t5x),
cw_4t5xs = sz(CEDE18$cw_4t5x))
return((x - min(x)) / (max(x) - min(x)))
# Min-max normalization function
min_max_normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Min-max normalization function
nz <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Create new variables with standardized values
df_nz <- data.frame(el_4t5xs = nz(CEDE18$el_4t5x),
em_4t5xs = nz(CEDE18$em_4t5x),
cs_4t5xs = nz(CEDE18$cs_4t5x),
cw_4t5xs = nz(CEDE18$cw_4t5x))
View(df_nz)
View(df_nz)
# Combine the normalized variables with the original dataframe
CEDE18 <- cbind(CEDE18, df_nz)
View(CEDE18)
# For sf (R), merge this data to shapefile
col <- merge(col, CEDE18, by = "MPIO_CDPMP", all.x = TRUE)
ggplot(col$el_4t5xs)
ggplot() +
geom_sf(data = col, aes(fill = variable_column)) +
scale_fill_viridis_c() +  # Adjust color scale as needed
theme_minimal()
ggplot() +
geom_sf(data = col, aes(fill = el4t5xs)) +
scale_fill_viridis_c() +  # Adjust color scale as needed
theme_minimal()
ggplot() +
geom_sf(data = col, aes(fill = el_4t5xs)) +
scale_fill_viridis_c() +  # Adjust color scale as needed
theme_minimal()
ggplot() +
geom_sf(data = col, aes(fill = el_4t5x)) +
scale_fill_viridis_c() +  # Adjust color scale as needed
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
setwd("G:/My Drive/git/snvdem24")
# make a clean slate
rm(list = ls())
# load needed packages
library(tidyverse)
library(vdemdata)
# Create a data frame of version 13 dataset:
v13 <- vdem
# this df appears to be the same as MC's "full + others" data set: read_dta("C:/Users/mcoppedg/Dropbox/MC/VDemFiles/Archive/V13/V-Dem-CY-Full+Others/V-Dem-CY-Full+Others-v13.dta")
# Filter to just Colombia since 1899:
v13_col <- filter(v13, country_name=="Colombia" & year > 1899)
# Select just the ID and subnational variables
# (Note: v2elsnless and v2elsnmore are not in this df. We will make sure to
# include them in our request to the data manager.)
v13_col_sn <- v13_col %>%
select(country_id, country_name, country_text_id, historical_date, year,
v2elsnlfc_0:v2elsnlfc_21, v2elsnmrfc_0:v2elsnmrfc_21,
v2clrgstch_0:v2clrgstch_21, v2clrgwkch_0:v2clrgwkch_21)
# Listing the variable names to check our work:
#names(v13_col_sn)
# Export the result to a CSV file:
#write.csv(v13_col_sn, file = "v13_col_sn.csv")
# create subset of V-Dem data for 2018
v13_col_sn_2018 <- subset(v13_col_sn, year == 2018)
v13_col_sn_2018 <- v13_col_sn_2018 %>%
select(-matches("_17$|_18$|_19$|_20$|_21$")) # remove responses not relevant for Colombia
df2rm = c("v13", "v13_col", "v13_col_sn", "df2rm")
rm(list = df2rm)
library(sf)
col <- st_read("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/BaseLayer/MGN_ANM_MPIOS.shp")
col <- col %>%
select(1:8)
library(readxl)
MGN18 <- read_excel("G:/My Drive/git/snvdem24/data/geospatial/MGN_ANM_MPIOS/MGN18.xls")
# We select only relevant variables for merging purposes.
# colnames(MGN18)
MGN18 <- MGN18 %>%
select(1:7)
# we merge the FID variable to our main shapefile
col <- merge(col, MGN18[, c("MPIO_CDPMP", "FID")], by = "MPIO_CDPMP", all.x = TRUE)
# municipal-level data for distance to capital city
IR18 <- read_excel("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/0-1_Rurality/PANEL_CARACTERISTICAS_GENERALES(2021).xlsx")
colnames(IR18)[3] = "MPIO_CDPMP"
colnames(IR18)[7] = "Year"
IR18 <- IR18 %>%
filter(Year == 2018)
# this data set also contains important descriptive information (department, province) that we will hang onto
IR18 <- IR18[c("MPIO_CDPMP", "depto", "provincia", "indrural")]
# Because the import creates a numeric field for DANE code, we must convert this numeric variable to character and then assure each observation has the corresponding 5 digits
IR18$MPIO_CDPMP <- as.character(IR18$MPIO_CDPMP)
# Add a 0 before values with 4 digits only
IR18$MPIO_CDPMP <- ifelse(nchar(IR18$MPIO_CDPMP) == 4, paste0("0", IR18$MPIO_CDPMP), IR18$MPIO_CDPMP)
# Option #1: interact V-Dem with rural index score
#For example, a high rural index multiplied by a high proportion of V-Dem's response will produce correspondingly high scores. This may occur with the values for less free and fair elections for rural (.875) vs. urban (.125) areas.
# ([indrur0t1]*Rural)+((1-[indrur0t1])*Urban)
# .80*.875 + (1-.8)*.125
IR18 <- IR18 %>%
mutate(el_0t1x = (indrural*v13_col_sn_2018$v2elsnlfc_0)+((1-indrural)*v13_col_sn_2018$v2elsnlfc_1)) %>%
mutate(em_0t1x = (indrural*v13_col_sn_2018$v2elsnmrfc_0)+((1-indrural)*v13_col_sn_2018$v2elsnmrfc_1)) %>%
mutate(cs_0t1x = (indrural*v13_col_sn_2018$v2clrgstch_0)+((1-indrural)*v13_col_sn_2018$v2clrgstch_1)) %>%
mutate(cw_0t1x = (indrural*v13_col_sn_2018$v2clrgwkch_0)+((1-indrural)*v13_col_sn_2018$v2clrgwkch_1))
# Min-max normalization function
nz <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Create new variables with normalized values. Normalization may be important when comparing across variable scales.
df_nz <- data.frame(el_0t1xs = nz(IR18$el_0t1x),
em_0t1xs = nz(IR18$em_0t1x),
cs_0t1xs = nz(IR18$cs_0t1x),
cw_0t1xs = nz(IR18$cw_0t1x))
# Combine the normalized variables with the original dataframe
CEDE18 <- cbind(CEDE18, df_nz)
# Combine the normalized variables with the original dataframe
IR18 <- cbind(IR18, df_nz)
# Option #1: interact V-Dem with rural index score
#For example, a high rural index multiplied by a high proportion of V-Dem's response will produce correspondingly high scores. This may occur with the values for less free and fair elections for rural (.875) vs. urban (.125) areas.
# ([indrur0t1]*Rural)+((1-[indrur0t1])*Urban)
# .80*.875 + (1-.8)*.125
IR18 <- IR18 %>%
mutate(el_0t1x = (indrural*v13_col_sn_2018$v2elsnlfc_0)+((1-indrural)*v13_col_sn_2018$v2elsnlfc_1)) %>%
mutate(em_0t1x = (indrural*v13_col_sn_2018$v2elsnmrfc_0)+((1-indrural)*v13_col_sn_2018$v2elsnmrfc_1)) %>%
mutate(cs_0t1x = (indrural*v13_col_sn_2018$v2clrgstch_0)+((1-indrural)*v13_col_sn_2018$v2clrgstch_1)) %>%
mutate(cw_0t1x = (indrural*v13_col_sn_2018$v2clrgwkch_0)+((1-indrural)*v13_col_sn_2018$v2clrgwkch_1))
# Min-max normalization function
nz <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Create new variables with normalized values. Normalization may be important when comparing across variable scales.
df_nz <- data.frame(el_0t1xs = nz(IR18$el_0t1x),
em_0t1xs = nz(IR18$em_0t1x),
cs_0t1xs = nz(IR18$cs_0t1x),
cw_0t1xs = nz(IR18$cw_0t1x))
# Combine the normalized variables with the original dataframe
IR18 <- cbind(IR18, df_nz)
# For sf (R), merge this data to shapefile
col <- merge(col, CEDE18, by = "MPIO_CDPMP", all.x = TRUE)
# Option #1: interact V-Dem with rural index score
#For example, a high rural index multiplied by a high proportion of V-Dem's response will produce correspondingly high scores. This may occur with the values for less free and fair elections for rural (.875) vs. urban (.125) areas.
# ([indrur0t1]*Rural)+((1-[indrur0t1])*Urban)
# .80*.875 + (1-.8)*.125
IR18 <- IR18 %>%
mutate(el_0t1x = (indrural*v13_col_sn_2018$v2elsnlfc_0)+((1-indrural)*v13_col_sn_2018$v2elsnlfc_1)) %>%
mutate(em_0t1x = (indrural*v13_col_sn_2018$v2elsnmrfc_0)+((1-indrural)*v13_col_sn_2018$v2elsnmrfc_1)) %>%
mutate(cs_0t1x = (indrural*v13_col_sn_2018$v2clrgstch_0)+((1-indrural)*v13_col_sn_2018$v2clrgstch_1)) %>%
mutate(cw_0t1x = (indrural*v13_col_sn_2018$v2clrgwkch_0)+((1-indrural)*v13_col_sn_2018$v2clrgwkch_1))
rm(IR18)
rm(df_nz)
# municipal-level data for distance to capital city
IR18 <- read_excel("G:/My Drive/git/snvdem24/data/geospatial/2018pmq/0-1_Rurality/PANEL_CARACTERISTICAS_GENERALES(2021).xlsx")
colnames(IR18)[3] = "MPIO_CDPMP"
colnames(IR18)[7] = "Year"
IR18 <- IR18 %>%
filter(Year == 2018)
# this data set also contains important descriptive information (department, province) that we will hang onto
IR18 <- IR18[c("MPIO_CDPMP", "depto", "provincia", "indrural")]
# Because the import creates a numeric field for DANE code, we must convert this numeric variable to character and then assure each observation has the corresponding 5 digits
IR18$MPIO_CDPMP <- as.character(IR18$MPIO_CDPMP)
# Add a 0 before values with 4 digits only
IR18$MPIO_CDPMP <- ifelse(nchar(IR18$MPIO_CDPMP) == 4, paste0("0", IR18$MPIO_CDPMP), IR18$MPIO_CDPMP)
# Option #1: interact V-Dem with rural index score
#For example, a high rural index multiplied by a high proportion of V-Dem's response will produce correspondingly high scores. This may occur with the values for less free and fair elections for rural (.875) vs. urban (.125) areas.
# ([indrur0t1]*Rural)+((1-[indrur0t1])*Urban)
# .80*.875 + (1-.8)*.125
IR18 <- IR18 %>%
mutate(el_0t1x = (indrural*v13_col_sn_2018$v2elsnlfc_0)+((1-indrural)*v13_col_sn_2018$v2elsnlfc_1)) %>%
mutate(em_0t1x = (indrural*v13_col_sn_2018$v2elsnmrfc_0)+((1-indrural)*v13_col_sn_2018$v2elsnmrfc_1)) %>%
mutate(cs_0t1x = (indrural*v13_col_sn_2018$v2clrgstch_0)+((1-indrural)*v13_col_sn_2018$v2clrgstch_1)) %>%
mutate(cw_0t1x = (indrural*v13_col_sn_2018$v2clrgwkch_0)+((1-indrural)*v13_col_sn_2018$v2clrgwkch_1))
# Min-max normalization function
nz <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Create new variables with normalized values. Normalization may be important when comparing across variable scales.
df_nz <- data.frame(el_0t1xs = nz(IR18$el_0t1x),
em_0t1xs = nz(IR18$em_0t1x),
cs_0t1xs = nz(IR18$cs_0t1x),
cw_0t1xs = nz(IR18$cw_0t1x))
# Combine the normalized variables with the original dataframe
IR18 <- cbind(IR18, df_nz)
# For sf (R), merge this data to shapefile
col <- merge(col, IR18, by = "MPIO_CDPMP", all.x = TRUE)
ggplot() +
geom_sf(data = col, aes(fill = el_0t1x)) + # just to check results
scale_fill_viridis_c() +  # Adjust color scale as needed
theme_minimal()
ggplot() +
geom_sf(data = col, aes(fill = el_0t1xs)) + # just to check results
scale_fill_viridis_c() +  # Adjust color scale as needed
theme_minimal()
selected_vars <- grep("v2elsnlfc|v2elsnmrfc|v2clrgstch|v2clrgwkch", colnames(long_df), value = TRUE)
selected_vars <- grep("v2elsnlfc|v2elsnmrfc|v2clrgstch|v2clrgwkch", colnames(v13_col_sn_2018), value = TRUE)
selected_df <- v13_col_sn %>%
select(all_of(selected_vars))
selected_df <- v13_col_sn_2018 %>%
select(all_of(selected_vars))
# Function to categorize variables
categorize_variable <- function(variable) {
if (grepl("v2elsnlfc", variable)) {
return("Elections less free")
} else if (grepl("v2elsnmrfc", variable)) {
return("Elections more free")
} else if (grepl("v2clrgstch", variable)) {
return("Civil liberties stronger")
} else if (grepl("v2clrgwkch", variable)) {
return("Civil liberties weaker")
} else {
return(NA)
}
}
selected_df$category <- sapply(colnames(selected_df), categorize_variable)
selected_df$category <- sapply(selected_vars, categorize_variable)
selected_df <- selected_df %>%
mutate(category = sapply(selected_vars, categorize_variable))
selected_df <- selected_df %>%
mutate(category = categorize_variable(names(selected_df)))
selected_df <- selected_df %>%
rowwise() %>%
mutate(category = categorize_variable(names(selected_df)))
selected_df <- selected_df %>%
mutate(category = categorize_variable(names(selected_df)))
library(purrr)
selected_df$category <- map_chr(selected_vars, categorize_variable)
selected_df <- selected_df %>%
mutate(category = case_when(
grepl("v2elsnlfc", names(selected_df)) ~ "Elections less free",
grepl("v2elsnmrfc", names(selected_df)) ~ "Elections more free",
grepl("v2clrgstch", names(selected_df)) ~ "Civil liberties stronger",
grepl("v2clrgwkch", names(selected_df)) ~ "Civil liberties weaker",
TRUE ~ NA_character_
))
selected_df$category <- sapply(selected_vars, categorize_variable)
grouped_df <- selected_df %>%
mutate(group = sub(".*_(\\d+)$", "\\1", names(selected_df))) %>%
group_by(group) %>%
summarize(across(everything(), list), .groups = "drop")
split_vars <- selected_df %>%
select(ends_with("_1"), ends_with("_2"), ends_with("_3"), ends_with("_4"),
ends_with("_5"), ends_with("_6"), ends_with("_7"), ends_with("_8"),
ends_with("_9"), ends_with("_10"), ends_with("_11"), ends_with("_12"),
ends_with("_13"), ends_with("_14"), ends_with("_15"), ends_with("_16"))
summary_table <- split_vars %>%
pivot_longer(cols = everything()) %>%
mutate(category = case_when(
grepl("v2elsnlfc", name) ~ "Elections less free",
grepl("v2elsnmrfc", name) ~ "Elections more free",
grepl("v2clrgstch", name) ~ "Civil liberties stronger",
grepl("v2clrgwkch", name) ~ "Civil liberties weaker",
TRUE ~ NA_character_
)) %>%
group_by(category) %>%
mutate(row_id = rep(1:16, length.out = n())) %>%
pivot_wider(names_from = category, values_from = value)
View(summary_table)
row_names <- sub(".*_(\\d+)$", "\\1", names(selected_df))
summary_df <- data.frame(
row_names = row_names,
selected_df
)
summary_df <- selected_df %>%
pivot_longer(cols = everything()) %>%
mutate(row_id = gsub(".*_(\\d+)$", "\\1", name)) %>%
mutate(column_id = gsub(".*(v2elsnlfc|v2elsnmrfc|v2clrgstch|v2clrgwkch).*", "\\1", name)) %>%
pivot_wider(names_from = column_id, values_from = value) %>%
select(-name)
View(summary_df)
summary_df <- summary_df %>%
group_by(row_id) %>%
summarise(across(everything(), ~ifelse(all(is.na(.)), NA, first(na.omit(.))))) %>%
ungroup()
View(summary_df)
summary_df <- summary_df %>%
mutate(row_id = as.numeric(row_id)) %>%
group_by(row_id) %>%
summarise(across(everything(), ~ifelse(all(is.na(.)), NA, first(na.omit(.))))) %>%
ungroup()
View(summary_df)
View(v13_col_sn_2018)
knitr::opts_chunk$set(echo = TRUE)
setwd("G:/My Drive/git/snvdem24")
# make a clean slate
rm(list = ls())
# load needed packages
library(tidyverse)
library(vdemdata)
# Create a data frame of version 13 dataset:
v13 <- vdem
# this df appears to be the same as MC's "full + others" data set: read_dta("C:/Users/mcoppedg/Dropbox/MC/VDemFiles/Archive/V13/V-Dem-CY-Full+Others/V-Dem-CY-Full+Others-v13.dta")
# Filter to just Colombia since 1899:
v13_col <- filter(v13, country_name=="Colombia" & year > 1899)
# Select just the ID and subnational variables
# (Note: v2elsnless and v2elsnmore are not in this df. We will make sure to
# include them in our request to the data manager.)
v13_col_sn <- v13_col %>%
select(country_id, country_name, country_text_id, historical_date, year,
v2elsnlfc_0:v2elsnlfc_21, v2elsnmrfc_0:v2elsnmrfc_21,
v2clrgstch_0:v2clrgstch_21, v2clrgwkch_0:v2clrgwkch_21)
# Listing the variable names to check our work:
#names(v13_col_sn)
# Export the result to a CSV file:
#write.csv(v13_col_sn, file = "v13_col_sn.csv")
# create subset of V-Dem data for 2018
v13_col_sn_2018 <- subset(v13_col_sn, year == 2018)
v13_col_sn_2018 <- v13_col_sn_2018 %>%
select(-matches("_17$|_18$|_19$|_20$|_21$")) # remove responses not relevant for Colombia
df2rm = c("v13", "v13_col", "v13_col_sn", "df2rm")
rm(list = df2rm)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(knitr)
library(purrr)
selected_vars <- grep("v2elsnlfc|v2elsnmrfc|v2clrgstch|v2clrgwkch", colnames(v13_col_sn_2018), value = TRUE)
selected_df <- v13_col_sn_2018 %>%
select(all_of(selected_vars))
summary_df <- selected_df %>%
pivot_longer(cols = everything()) %>%
mutate(row_id = gsub(".*_(\\d+)$", "\\1", name)) %>%
mutate(column_id = gsub(".*(v2elsnlfc|v2elsnmrfc|v2clrgstch|v2clrgwkch).*", "\\1", name)) %>%
pivot_wider(names_from = column_id, values_from = value) %>%
select(-name) %>%
mutate(row_id = as.numeric(row_id)) %>%
group_by(row_id) %>%
summarise(across(everything(), ~ifelse(all(is.na(.)), NA, first(na.omit(.))))) %>%
ungroup()
new_col_names <- c("Elections less free", "Elections more free", "Civil liberties stronger", "Civil liberties weaker")
new_row_names <- c(
"Rural", "Urban", "Less econ devt", "More econ devt", "Inside capital",
"Outside capital", "North", "South", "West", "East", "civil unrest",
"illicit activity", "sparse pop.", "Remote", "Indigenous",
"Ruling party strong", "Ruling party weak"
)
# Rename columns and modify row_id variable
summary_table <- summary_df %>%
rename(
`Elections less free` = v2elsnlfc,
`Elections more free` = v2elsnmrfc,
`Civil liberties stronger` = v2clrgstch,
`Civil liberties weaker` = v2clrgwkch
) %>%
mutate(row_id = new_row_names[as.numeric(row_id) + 1])
summary_table
library(kableExtra)
# Define the filename for the image
image_file <- "G:/My Drive/git/snvdem24/data/geospatial/2018pmq/vdem_summary_table.png"
# Print the table to an image
summary_table %>%
kable() %>%
kable_styling() %>%
as_image(file = image_file)
# Define the filename for the image
image_file <- "vdem_summary_table.png"
# Print the table to an image
summary_table %>%
kable() %>%
kable_styling() %>%
as_image(file = image_file)
# Define the filename for the image
image_file <- "summary_table.png"
# Print the table to an image
save_kable(summary_table, file = image_file)
webshot::install_phantomjs()
# Print the table to an image
save_kable(summary_table, file = image_file)
getwd()
# Print the table to an image
save_kable(summary_table, file = image_file)
summary_table
